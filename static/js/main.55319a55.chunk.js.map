{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["colorHexChars","generateRandomColor","randomColor","i","Math","floor","random","length","App","state","currentColorMask","colorArray","copied","handleKeyDown","event","inputKey","key","isValidHexChar","includes","toUpperCase","_this","paddText","newColorArray","Object","toConsumableArray","concat","pop","setState","join","handleBodyClick","this","document","addEventListener","_this2","_this$state","themeColor","parseInt","substring","toString","getElementsByTagName","content","react_default","a","createElement","className","style","background","onClick","split","map","char","index","class","href","target","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gOAIMA,eAAgB,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,MAE5FC,EAAsB,WAE1B,IADA,IAAIC,EAAc,GACTC,EAAI,EAAGA,EAAI,EAAGA,IACrBD,GAAeF,EAAcI,KAAKC,MAAMD,KAAKE,SAASN,EAAcO,SAEtE,OAAOL,GAwEMM,6MApEbC,MAAQ,CACNC,iBAAkB,UAClBC,WAAY,GACZC,QAAQ,KAQVC,cAAgB,SAACC,GACf,IAAMC,EAAWD,EAAME,IACjBC,EAAiBjB,EAAckB,SAASH,EAASI,eAC/CR,EAAeS,EAAKX,MAApBE,WACJU,EAAW,GAEf,GAAIJ,GAA6C,cAA3BF,EAASI,cAA+B,CAE5D,IAAIG,EAAgB,GAEhBL,IACFK,EAAiBX,EAAWJ,OAAS,EAArBgB,OAAAC,EAAA,EAAAD,CAA8BH,EAAKX,MAAME,YAAzCc,OAAA,CAAqDV,EAASI,gBAAiBR,GAGlE,cAA3BI,EAASI,eAAiCR,EAAWJ,OAAS,IAChEe,EAAaC,OAAAC,EAAA,EAAAD,CAAOH,EAAKX,MAAME,aACjBe,MAGhB,IAAK,IAAIvB,EAAI,EAAGA,EAAI,EAAEmB,EAAcf,OAAQJ,IAC1CkB,GAAYrB,EAAcI,KAAKC,MAAMD,KAAKE,SAASN,EAAcO,SAGnEa,EAAKO,SAAS,CAAChB,WAAYW,EAAeZ,iBAAgB,IAAAe,OAAMH,EAAcM,KAAK,IAAIP,SAK3FQ,gBAAkB,WAChBT,EAAKO,SAAS,CAACjB,iBAAgB,IAAAe,OAAMxB,2FAjCrC6B,KAAKH,SAAS,CAACjB,iBAAgB,IAAAe,OAAMxB,OACrC8B,SAASC,iBAAiB,UAAWF,KAAKjB,gDAmCnC,IAAAoB,EAAAH,KAAAI,EAEkCJ,KAAKrB,MAAtCC,EAFDwB,EAECxB,iBAEFyB,GAJCD,EAEmBvB,WAEV,IAAAc,QAAQW,SAAS1B,EAAiB2B,UAAU,GAAI,IAAM,IAAIC,SAAS,MAInF,OAFAP,SAASQ,qBAAqB,QAAQ,eAAeC,QAAUL,EAG7DM,EAAAC,EAAAC,cAAA,OACEC,UAAU,eACVC,MAAO,CAACC,WAAYhB,KAAKrB,MAAMC,kBAC/BqC,QAAS,kBAAMd,EAAKJ,oBAEpBY,EAAAC,EAAAC,cAAA,OAAKC,UAAU,sBACdlC,EAAiBsC,MAAM,IAAIC,IAAI,SAACC,EAAMC,GACrC,OAAOV,EAAAC,EAAAC,cAAA,OAAK3B,IAAKmC,GAAQD,MAG3BT,EAAAC,EAAAC,cAAA,OAAKS,MAAM,UAAX,SAAgCX,EAAAC,EAAAC,cAAA,KAAGU,KAAK,kCAAkCC,OAAO,UAAjD,gBAAhC,SAAgHb,EAAAC,EAAAC,cAAA,+BA/DtGY,aCFEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOrB,EAAAC,EAAAC,cAACoB,EAAD,MAAShC,SAASiC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.55319a55.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport {CopyToClipboard} from 'react-copy-to-clipboard'\nimport './App.css'\n\nconst colorHexChars = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F']\n\nconst generateRandomColor = () => {\n  let randomColor = ''\n  for (let i = 0; i < 6; i++) {\n    randomColor += colorHexChars[Math.floor(Math.random()*colorHexChars.length)]\n  }\n  return randomColor\n}\n\nclass App extends Component {\n  state = {\n    currentColorMask: '#54ED42',\n    colorArray: [],\n    copied: false\n  }\n\n  componentDidMount() {\n    this.setState({currentColorMask: `#${generateRandomColor()}`})\n    document.addEventListener(\"keydown\", this.handleKeyDown)\n  }\n\n  handleKeyDown = (event) => {\n    const inputKey = event.key\n    const isValidHexChar = colorHexChars.includes(inputKey.toUpperCase())\n    const { colorArray } = this.state\n    let paddText = ''\n\n    if (isValidHexChar || inputKey.toUpperCase() === 'BACKSPACE') {\n\n      let newColorArray = []\n\n      if (isValidHexChar) {\n        newColorArray = (colorArray.length < 6) ? [...this.state.colorArray, inputKey.toUpperCase()] : colorArray\n      }\n\n      if (inputKey.toUpperCase() === 'BACKSPACE' && colorArray.length > 0) {\n        newColorArray = [...this.state.colorArray]\n        newColorArray.pop()\n      }\n\n      for (let i = 0; i < 6-newColorArray.length; i++) {\n        paddText += colorHexChars[Math.floor(Math.random()*colorHexChars.length)]\n      }\n\n      this.setState({colorArray: newColorArray, currentColorMask: `#${newColorArray.join('')+paddText}`})\n    }\n\n  }\n\n  handleBodyClick = () => {\n    this.setState({currentColorMask: `#${generateRandomColor()}`})\n  }\n\n  render() {\n\n    const { currentColorMask, colorArray } = this.state\n\n    const themeColor = `#${(parseInt(currentColorMask.substring(1), 16) + 10).toString(16)}`\n\n    document.getElementsByTagName('meta')[\"theme-color\"].content = themeColor\n\n    return (\n      <div\n        className=\"app noselect\"\n        style={{background: this.state.currentColorMask}}\n        onClick={() => this.handleBodyClick()}\n        >\n        <div className=\"color-name-wrapper\">\n        {currentColorMask.split('').map((char, index) => {\n          return <div key={index}>{char}</div>\n        })}\n        </div>\n        <div class=\"credit\">&lt;&gt; by <a href=\"https://github.com/nirajkaushal\" target=\"_blank\">nirajkaushal</a> with <span>&hearts;</span></div>\n      </div>\n    );\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}